#!/usr/bin/env node

var v = require('../lib/version');
var program = require('commander');
var path = require('path');
var firstline = require('firstline');
var findPackage = require('find-package');
var fs = require('fs');


var SIGNATURE = '// generated by genversion';

var increaseVerbosity = function (v, total) {
  return total + 1;
};


var generate = function (absTarget, callback) {
  var pjson, err, ver, content;

  // Find closest package.json from the target towards filesystem root
  pjson = findPackage(absTarget);

  // findPackage returns null if not found
  if (pjson === null) {
    err = new Error('No package.json found along path ' + absTarget);
    return callback(err);
  }

  // Get version property
  version = pjson.version;

  // Ensure version is string
  if (typeof version !== 'string') {
    err = new Error('Invalid version in package.json: ' + version);
    return callback(err);
  }

  content = SIGNATURE + '\nmodule.exports = \'' + version + '\';\n';

  fs.writeFile(absTarget, content, 'utf8', function (err) {
    if (err) {
      return callback(err);
    }
    return callback(null, version);
  });

};


program
  .version(v)
  .usage('[options] <target>')
  .option('-v, --verbose', 'Output the new version.', increaseVerbosity, 0)
  .action(function (target) {
    var absTarget;

    // Make target path absolute.
    // See https://stackoverflow.com/a/30450519/638546
    if (path.isAbsolute(target)) {
      absTarget = target;
    } else {
      absTarget = path.resolve(process.cwd(), target);
    }

    // Ensure that target does not exist or if it exists,
    // ensure it was generated by genversion. Otherwise
    // exit with an error.
    firstline(absTarget)
      .then(function (line) {
        if (line === SIGNATURE) {
          // OK, the existing file was generated by us.
          generate(absTarget, function (err, version) {
            if (err) {
              console.error(err);
              return;
            }

            if (program.verbose >= 1) {
              console.log('File ' + path.basename(absTarget) +
                ' was successfully updated to ' + version);
            }
          });
        } else {
          // FAIL, unknown file, do not replace
          console.error('ERROR: File ' + target + ' is not generated by genversion and therefore will not be replaced. Please ensure that the file can be destroyed and remove it manually before retry.');
        }
      })
      .catch(function (err) {
        if (err.code === 'ENOENT') {
          // OK, file does not exist.
          generate(absTarget, function (err, version) {
            if (err) {
              console.error(err);
              return;
            }

            if (program.verbose >= 1) {
              console.log('File ' + path.basename(absTarget) +
                ' was successfully generated with version ' + version);
            }
          });
        } else {
          // Other error.
          console.error(err.toString());
          process.exit(1);
        }
      });

    // Find package.json recursively, start from the directory of target

    // Read version from package.json

    // Write version to target and save.

    // Exit with success

    //console.log('target', target);
    //console.log('verbosity', program.verbose);
  });

program.parse(process.argv);
