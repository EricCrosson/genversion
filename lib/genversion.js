var path = require('path');
var firstline = require('firstline');
var findPackage = require('find-package');
var fs = require('fs');
var mkdirp = require('mkdirp');

var SIGNATURE = '// generated by genversion';


var makeAbsolute = function (target) {
  // Make target path absolute.
  // See https://stackoverflow.com/a/30450519/638546

  if (path.isAbsolute(target)) {
    return target;
  }

  return path.resolve(process.cwd(), target);
};


exports.check = function (targetPath, callback) {
  // Check if a version file can be generated.
  //
  // Parameters
  //   targetPath
  //     relative or absolute filepath to version file.
  //   callback
  //     function (err, doesExist, isByGenversion)
  //       err
  //         non-null on file system error
  //       doesExist
  //         boolean
  //       isByGenversion
  //         boolean, true if file exists and is generated by genversion.
  //         The check is done by comparing the SIGNATURE on the first line.

  var absTarget = makeAbsolute(targetPath);

  // Ensure that target does not exist or if it exists,
  // ensure it was generated by genversion. Otherwise
  // exit with an error.
  firstline(absTarget)
    .then(function (line) {
      if (line === SIGNATURE) {
        // OK, the existing file was generated by us.
        return callback(null, true, true);
      }
      // Unknown file
      return callback(null, true, false);
    })
    .catch(function (err) {
      if (err.code === 'ENOENT') {
        // OK, file does not exist.
        return callback(null, false, false);
      }
      // Real error.
      return callback(err, false, false);
    });
};


exports.generate = function (targetPath, callback) {
  // Generate version submodule file to targetPath with utf-8 encoding.
  //
  // Parameters:
  //   targetPath
  //     absolute or relative path
  //   callback
  //     function (err, version)
  //       err
  //         null if generated successfully
  //         non-null if no package.json found or version in it is invalid
  //       version
  //         new version string, undefined on error
  //
  var absTarget, pjson, err, ver, content;

  var absTarget = makeAbsolute(targetPath);

  // Find closest package.json from the target towards filesystem root
  pjson = findPackage(absTarget);

  // findPackage returns null if not found
  if (pjson === null) {
    err = new Error('No package.json found along path ' + absTarget);
    return callback(err);
  }

  // Get version property
  version = pjson.version;

  // Ensure version is string
  if (typeof version !== 'string') {
    err = new Error('Invalid version in package.json: ' + version);
    return callback(err);
  }

  content = SIGNATURE + '\nmodule.exports = \'' + version + '\';\n';

  // Ensure directory exists
  mkdirp(path.dirname(absTarget), function (errp) {
    if (errp) {
      return callback(errp);
    }

    fs.writeFile(absTarget, content, 'utf8', function (err) {
      if (err) {
        return callback(err);
      }
      return callback(null, version);
    });
  });


};
